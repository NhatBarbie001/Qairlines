// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.28.0
// source: news.sql

package db

import (
	"context"
)

const createNews = `-- name: CreateNews :one
INSERT INTO "news" (
  slug,
  image_url,
  title,
  description,
  author,
  content
) VALUES (
  $1, $2, $3, $4, $5, $6
) RETURNING news_id, slug, image_url, title, description, author, content, created_at
`

type CreateNewsParams struct {
	Slug        string `json:"slug"`
	ImageUrl    string `json:"image_url"`
	Title       string `json:"title"`
	Description string `json:"description"`
	Author      string `json:"author"`
	Content     string `json:"content"`
}

func (q *Queries) CreateNews(ctx context.Context, arg CreateNewsParams) (News, error) {
	row := q.db.QueryRow(ctx, createNews,
		arg.Slug,
		arg.ImageUrl,
		arg.Title,
		arg.Description,
		arg.Author,
		arg.Content,
	)
	var i News
	err := row.Scan(
		&i.NewsID,
		&i.Slug,
		&i.ImageUrl,
		&i.Title,
		&i.Description,
		&i.Author,
		&i.Content,
		&i.CreatedAt,
	)
	return i, err
}

const getAllNews = `-- name: GetAllNews :many
SELECT news_id, slug, image_url, title, description, author, content, created_at FROM "news"
`

func (q *Queries) GetAllNews(ctx context.Context) ([]News, error) {
	rows, err := q.db.Query(ctx, getAllNews)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []News{}
	for rows.Next() {
		var i News
		if err := rows.Scan(
			&i.NewsID,
			&i.Slug,
			&i.ImageUrl,
			&i.Title,
			&i.Description,
			&i.Author,
			&i.Content,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getNews = `-- name: GetNews :one
SELECT news_id, slug, image_url, title, description, author, content, created_at FROM "news"
WHERE news_id = $1 LIMIT 1
`

func (q *Queries) GetNews(ctx context.Context, newsID int64) (News, error) {
	row := q.db.QueryRow(ctx, getNews, newsID)
	var i News
	err := row.Scan(
		&i.NewsID,
		&i.Slug,
		&i.ImageUrl,
		&i.Title,
		&i.Description,
		&i.Author,
		&i.Content,
		&i.CreatedAt,
	)
	return i, err
}

const listNews = `-- name: ListNews :many
SELECT news_id, slug, image_url, title, description, author, content, created_at FROM "news"
ORDER BY news_id
LIMIT $1
OFFSET $2
`

type ListNewsParams struct {
	Limit  int32 `json:"limit"`
	Offset int32 `json:"offset"`
}

func (q *Queries) ListNews(ctx context.Context, arg ListNewsParams) ([]News, error) {
	rows, err := q.db.Query(ctx, listNews, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []News{}
	for rows.Next() {
		var i News
		if err := rows.Scan(
			&i.NewsID,
			&i.Slug,
			&i.ImageUrl,
			&i.Title,
			&i.Description,
			&i.Author,
			&i.Content,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
