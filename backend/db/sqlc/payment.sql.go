// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.28.0
// source: payment.sql

package db

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const createPayment = `-- name: CreatePayment :one
INSERT INTO payment (
  amount,
  currency,
  payment_method,
  status,
  booking_id
) VALUES (
  $1, $2, $3, $4, $5
) RETURNING payment_id, transaction_date_time, amount, currency, payment_method, status, booking_id
`

type CreatePaymentParams struct {
	Amount        pgtype.Numeric `json:"amount"`
	Currency      pgtype.Text    `json:"currency"`
	PaymentMethod pgtype.Text    `json:"payment_method"`
	Status        pgtype.Text    `json:"status"`
	BookingID     pgtype.Text    `json:"booking_id"`
}

func (q *Queries) CreatePayment(ctx context.Context, arg CreatePaymentParams) (Payment, error) {
	row := q.db.QueryRow(ctx, createPayment,
		arg.Amount,
		arg.Currency,
		arg.PaymentMethod,
		arg.Status,
		arg.BookingID,
	)
	var i Payment
	err := row.Scan(
		&i.PaymentID,
		&i.TransactionDateTime,
		&i.Amount,
		&i.Currency,
		&i.PaymentMethod,
		&i.Status,
		&i.BookingID,
	)
	return i, err
}

const deletePayment = `-- name: DeletePayment :exec
DELETE FROM payment
WHERE payment_id = $1
`

func (q *Queries) DeletePayment(ctx context.Context, paymentID int64) error {
	_, err := q.db.Exec(ctx, deletePayment, paymentID)
	return err
}

const getPayment = `-- name: GetPayment :one
SELECT payment_id, transaction_date_time, amount, currency, payment_method, status, booking_id FROM payment
WHERE payment_id = $1 LIMIT 1
`

func (q *Queries) GetPayment(ctx context.Context, paymentID int64) (Payment, error) {
	row := q.db.QueryRow(ctx, getPayment, paymentID)
	var i Payment
	err := row.Scan(
		&i.PaymentID,
		&i.TransactionDateTime,
		&i.Amount,
		&i.Currency,
		&i.PaymentMethod,
		&i.Status,
		&i.BookingID,
	)
	return i, err
}

const listPayment = `-- name: ListPayment :many
SELECT payment_id, transaction_date_time, amount, currency, payment_method, status, booking_id FROM payment
ORDER BY payment_id
LIMIT $1
OFFSET $2
`

type ListPaymentParams struct {
	Limit  int32 `json:"limit"`
	Offset int32 `json:"offset"`
}

func (q *Queries) ListPayment(ctx context.Context, arg ListPaymentParams) ([]Payment, error) {
	rows, err := q.db.Query(ctx, listPayment, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Payment
	for rows.Next() {
		var i Payment
		if err := rows.Scan(
			&i.PaymentID,
			&i.TransactionDateTime,
			&i.Amount,
			&i.Currency,
			&i.PaymentMethod,
			&i.Status,
			&i.BookingID,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
