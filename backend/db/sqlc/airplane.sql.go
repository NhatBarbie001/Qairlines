// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.28.0
// source: airplane.sql

package db

import (
	"context"
)

const createAirplane = `-- name: CreateAirplane :one
INSERT INTO airplane (
  airplane_model_id,
  registration_number
) VALUES (
  $1, $2
) RETURNING airplane_id, airplane_model_id, registration_number, active
`

type CreateAirplaneParams struct {
	AirplaneModelID    int64  `json:"airplane_model_id"`
	RegistrationNumber string `json:"registration_number"`
}

func (q *Queries) CreateAirplane(ctx context.Context, arg CreateAirplaneParams) (Airplane, error) {
	row := q.db.QueryRow(ctx, createAirplane, arg.AirplaneModelID, arg.RegistrationNumber)
	var i Airplane
	err := row.Scan(
		&i.AirplaneID,
		&i.AirplaneModelID,
		&i.RegistrationNumber,
		&i.Active,
	)
	return i, err
}

const deleteAirplane = `-- name: DeleteAirplane :exec
DELETE FROM airplane
WHERE registration_number = $1
`

func (q *Queries) DeleteAirplane(ctx context.Context, registrationNumber string) error {
	_, err := q.db.Exec(ctx, deleteAirplane, registrationNumber)
	return err
}

const getAirplane = `-- name: GetAirplane :one
SELECT airplane_id, airplane_model_id, registration_number, active FROM airplane
WHERE registration_number = $1 LIMIT 1
`

func (q *Queries) GetAirplane(ctx context.Context, registrationNumber string) (Airplane, error) {
	row := q.db.QueryRow(ctx, getAirplane, registrationNumber)
	var i Airplane
	err := row.Scan(
		&i.AirplaneID,
		&i.AirplaneModelID,
		&i.RegistrationNumber,
		&i.Active,
	)
	return i, err
}

const listAirplanes = `-- name: ListAirplanes :many
SELECT airplane_id, airplane_model_id, registration_number, active FROM airplane
ORDER BY registration_number
LIMIT $1
OFFSET $2
`

type ListAirplanesParams struct {
	Limit  int32 `json:"limit"`
	Offset int32 `json:"offset"`
}

func (q *Queries) ListAirplanes(ctx context.Context, arg ListAirplanesParams) ([]Airplane, error) {
	rows, err := q.db.Query(ctx, listAirplanes, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Airplane{}
	for rows.Next() {
		var i Airplane
		if err := rows.Scan(
			&i.AirplaneID,
			&i.AirplaneModelID,
			&i.RegistrationNumber,
			&i.Active,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
