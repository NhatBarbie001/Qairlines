// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.28.0
// source: flights.sql

package db

import (
	"context"
	"time"

	"github.com/jackc/pgx/v5/pgtype"
)

const createFlight = `-- name: CreateFlight :one
INSERT INTO flights (
  flight_id,
  flight_number,
  aircraft_type,
  departure_city,
  arrival_city,
  departure_airport,
  arrival_airport,
  departure_time,
  arrival_time,
  base_price,
  status
) VALUES (
  $1, $2, $3, $4, $5, $6, $7, $8, $9, $10, $11
) RETURNING flight_id, flight_number, aircraft_type, departure_city, arrival_city, departure_airport, arrival_airport, departure_time, arrival_time, base_price, total_seats_row, total_seats_column, status
`

type CreateFlightParams struct {
	FlightID         int64        `json:"flight_id"`
	FlightNumber     string       `json:"flight_number"`
	AircraftType     pgtype.Text  `json:"aircraft_type"`
	DepartureCity    pgtype.Text  `json:"departure_city"`
	ArrivalCity      pgtype.Text  `json:"arrival_city"`
	DepartureAirport pgtype.Text  `json:"departure_airport"`
	ArrivalAirport   pgtype.Text  `json:"arrival_airport"`
	DepartureTime    time.Time    `json:"departure_time"`
	ArrivalTime      time.Time    `json:"arrival_time"`
	BasePrice        int32        `json:"base_price"`
	Status           FlightStatus `json:"status"`
}

func (q *Queries) CreateFlight(ctx context.Context, arg CreateFlightParams) (Flight, error) {
	row := q.db.QueryRow(ctx, createFlight,
		arg.FlightID,
		arg.FlightNumber,
		arg.AircraftType,
		arg.DepartureCity,
		arg.ArrivalCity,
		arg.DepartureAirport,
		arg.ArrivalAirport,
		arg.DepartureTime,
		arg.ArrivalTime,
		arg.BasePrice,
		arg.Status,
	)
	var i Flight
	err := row.Scan(
		&i.FlightID,
		&i.FlightNumber,
		&i.AircraftType,
		&i.DepartureCity,
		&i.ArrivalCity,
		&i.DepartureAirport,
		&i.ArrivalAirport,
		&i.DepartureTime,
		&i.ArrivalTime,
		&i.BasePrice,
		&i.TotalSeatsRow,
		&i.TotalSeatsColumn,
		&i.Status,
	)
	return i, err
}

const deleteFlight = `-- name: DeleteFlight :exec
DELETE FROM flights
WHERE flight_id = $1
`

func (q *Queries) DeleteFlight(ctx context.Context, flightID int64) error {
	_, err := q.db.Exec(ctx, deleteFlight, flightID)
	return err
}

const getFlight = `-- name: GetFlight :one
SELECT flight_id, flight_number, aircraft_type, departure_city, arrival_city, departure_airport, arrival_airport, departure_time, arrival_time, base_price, total_seats_row, total_seats_column, status FROM flights
WHERE flight_id = $1 LIMIT 1
`

func (q *Queries) GetFlight(ctx context.Context, flightID int64) (Flight, error) {
	row := q.db.QueryRow(ctx, getFlight, flightID)
	var i Flight
	err := row.Scan(
		&i.FlightID,
		&i.FlightNumber,
		&i.AircraftType,
		&i.DepartureCity,
		&i.ArrivalCity,
		&i.DepartureAirport,
		&i.ArrivalAirport,
		&i.DepartureTime,
		&i.ArrivalTime,
		&i.BasePrice,
		&i.TotalSeatsRow,
		&i.TotalSeatsColumn,
		&i.Status,
	)
	return i, err
}

const getFlightsByStatus = `-- name: GetFlightsByStatus :one
SELECT status FROM flights
WHERE flight_id = $1 LIMIT 1
`

func (q *Queries) GetFlightsByStatus(ctx context.Context, flightID int64) (FlightStatus, error) {
	row := q.db.QueryRow(ctx, getFlightsByStatus, flightID)
	var status FlightStatus
	err := row.Scan(&status)
	return status, err
}

const listFlights = `-- name: ListFlights :many
SELECT flight_id, flight_number, aircraft_type, departure_city, arrival_city, departure_airport, arrival_airport, departure_time, arrival_time, base_price, total_seats_row, total_seats_column, status FROM flights
ORDER BY flight_id
LIMIT $1
OFFSET $2
`

type ListFlightsParams struct {
	Limit  int32 `json:"limit"`
	Offset int32 `json:"offset"`
}

func (q *Queries) ListFlights(ctx context.Context, arg ListFlightsParams) ([]Flight, error) {
	rows, err := q.db.Query(ctx, listFlights, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Flight{}
	for rows.Next() {
		var i Flight
		if err := rows.Scan(
			&i.FlightID,
			&i.FlightNumber,
			&i.AircraftType,
			&i.DepartureCity,
			&i.ArrivalCity,
			&i.DepartureAirport,
			&i.ArrivalAirport,
			&i.DepartureTime,
			&i.ArrivalTime,
			&i.BasePrice,
			&i.TotalSeatsRow,
			&i.TotalSeatsColumn,
			&i.Status,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
