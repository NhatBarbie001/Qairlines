// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.28.0

package db

import (
	"database/sql/driver"
	"fmt"
	"time"

	"github.com/jackc/pgx/v5/pgtype"
)

type FlightClassType string

const (
	FlightClassTypeEconomy  FlightClassType = "Economy"
	FlightClassTypeBusiness FlightClassType = "Business"
	FlightClassTypeFirst    FlightClassType = "First"
)

func (e *FlightClassType) Scan(src interface{}) error {
	switch s := src.(type) {
	case []byte:
		*e = FlightClassType(s)
	case string:
		*e = FlightClassType(s)
	default:
		return fmt.Errorf("unsupported scan type for FlightClassType: %T", src)
	}
	return nil
}

type NullFlightClassType struct {
	FlightClassType FlightClassType `json:"flight_class_type"`
	Valid           bool            `json:"valid"` // Valid is true if FlightClassType is not NULL
}

// Scan implements the Scanner interface.
func (ns *NullFlightClassType) Scan(value interface{}) error {
	if value == nil {
		ns.FlightClassType, ns.Valid = "", false
		return nil
	}
	ns.Valid = true
	return ns.FlightClassType.Scan(value)
}

// Value implements the driver Valuer interface.
func (ns NullFlightClassType) Value() (driver.Value, error) {
	if !ns.Valid {
		return nil, nil
	}
	return string(ns.FlightClassType), nil
}

type FlightStatus string

const (
	FlightStatusLanded    FlightStatus = "Landed"
	FlightStatusDelayed   FlightStatus = "Delayed"
	FlightStatusOnTime    FlightStatus = "On Time"
	FlightStatusScheduled FlightStatus = "Scheduled"
)

func (e *FlightStatus) Scan(src interface{}) error {
	switch s := src.(type) {
	case []byte:
		*e = FlightStatus(s)
	case string:
		*e = FlightStatus(s)
	default:
		return fmt.Errorf("unsupported scan type for FlightStatus: %T", src)
	}
	return nil
}

type NullFlightStatus struct {
	FlightStatus FlightStatus `json:"flight_status"`
	Valid        bool         `json:"valid"` // Valid is true if FlightStatus is not NULL
}

// Scan implements the Scanner interface.
func (ns *NullFlightStatus) Scan(value interface{}) error {
	if value == nil {
		ns.FlightStatus, ns.Valid = "", false
		return nil
	}
	ns.Valid = true
	return ns.FlightStatus.Scan(value)
}

// Value implements the driver Valuer interface.
func (ns NullFlightStatus) Value() (driver.Value, error) {
	if !ns.Valid {
		return nil, nil
	}
	return string(ns.FlightStatus), nil
}

type GenderEnum string

const (
	GenderEnumMale   GenderEnum = "Male"
	GenderEnumFemale GenderEnum = "Female"
	GenderEnumOther  GenderEnum = "Other"
)

func (e *GenderEnum) Scan(src interface{}) error {
	switch s := src.(type) {
	case []byte:
		*e = GenderEnum(s)
	case string:
		*e = GenderEnum(s)
	default:
		return fmt.Errorf("unsupported scan type for GenderEnum: %T", src)
	}
	return nil
}

type NullGenderEnum struct {
	GenderEnum GenderEnum `json:"gender_enum"`
	Valid      bool       `json:"valid"` // Valid is true if GenderEnum is not NULL
}

// Scan implements the Scanner interface.
func (ns *NullGenderEnum) Scan(value interface{}) error {
	if value == nil {
		ns.GenderEnum, ns.Valid = "", false
		return nil
	}
	ns.Valid = true
	return ns.GenderEnum.Scan(value)
}

// Value implements the driver Valuer interface.
func (ns NullGenderEnum) Value() (driver.Value, error) {
	if !ns.Valid {
		return nil, nil
	}
	return string(ns.GenderEnum), nil
}

type Airplane struct {
	AirplaneID         int64       `json:"airplane_id"`
	AirplaneModelID    int64       `json:"airplane_model_id"`
	RegistrationNumber string      `json:"registration_number"`
	Active             pgtype.Bool `json:"active"`
}

type AirplaneModel struct {
	AirplaneModelID int64     `json:"airplane_model_id"`
	Name            string    `json:"name"`
	Manufacturer    string    `json:"manufacturer"`
	TotalSeats      int64     `json:"total_seats"`
	CreatedAt       time.Time `json:"created_at"`
}

type Airport struct {
	AirportID   int64     `json:"airport_id"`
	AirportCode string    `json:"airport_code"`
	City        string    `json:"city"`
	Name        string    `json:"name"`
	CreatedAt   time.Time `json:"created_at"`
}

type Booking struct {
	BookingID        int64            `json:"booking_id"`
	BookerEmail      string           `json:"booker_email"`
	NumberOfAdults   int64            `json:"number_of_adults"`
	NumberOfChildren int64            `json:"number_of_children"`
	FlightClass      FlightClassType  `json:"flight_class"`
	Cancelled        pgtype.Bool      `json:"cancelled"`
	FlightID         int64            `json:"flight_id"`
	BookingDate      pgtype.Timestamp `json:"booking_date"`
}

type Flight struct {
	FlightID               int64            `json:"flight_id"`
	FlightNumber           string           `json:"flight_number"`
	RegistrationNumber     string           `json:"registration_number"`
	EstimatedDepartureTime pgtype.Timestamp `json:"estimated_departure_time"`
	ActualDepartureTime    pgtype.Timestamp `json:"actual_departure_time"`
	EstimatedArrivalTime   pgtype.Timestamp `json:"estimated_arrival_time"`
	ActualArrivalTime      pgtype.Timestamp `json:"actual_arrival_time"`
	DepartureAirportID     int64            `json:"departure_airport_id"`
	DestinationAirportID   int64            `json:"destination_airport_id"`
	FlightPrice            pgtype.Numeric   `json:"flight_price"`
	Status                 FlightStatus     `json:"status"`
}

type FlightSeat struct {
	FlightSeatsID   int64           `json:"flight_seats_id"`
	FlightID        int64           `json:"flight_id"`
	FlightClass     FlightClassType `json:"flight_class"`
	ClassMultiplier pgtype.Numeric  `json:"class_multiplier"`
	ChildMultiplier pgtype.Numeric  `json:"child_multiplier"`
	MaxRowSeat      int64           `json:"max_row_seat"`
	MaxColSeat      int64           `json:"max_col_seat"`
}

type Passenger struct {
	PassengerID    int64       `json:"passenger_id"`
	BookingID      int64       `json:"booking_id"`
	CitizenID      string      `json:"citizen_id"`
	PassportNumber pgtype.Text `json:"passport_number"`
	Gender         GenderEnum  `json:"gender"`
	PhoneNumber    string      `json:"phone_number"`
	FirstName      string      `json:"first_name"`
	LastName       string      `json:"last_name"`
	Nationality    string      `json:"nationality"`
	DateOfBirth    pgtype.Date `json:"date_of_birth"`
	SeatRow        int32       `json:"seat_row"`
	SeatCol        string      `json:"seat_col"`
}

type Payment struct {
	PaymentID           int64            `json:"payment_id"`
	TransactionDateTime pgtype.Timestamp `json:"transaction_date_time"`
	Amount              pgtype.Numeric   `json:"amount"`
	Currency            pgtype.Text      `json:"currency"`
	PaymentMethod       pgtype.Text      `json:"payment_method"`
	Status              pgtype.Text      `json:"status"`
	BookingID           int64            `json:"booking_id"`
}

type User struct {
	UserID   int64  `json:"user_id"`
	Username string `json:"username"`
	Password string `json:"password"`
	Role     string `json:"role"`
}
