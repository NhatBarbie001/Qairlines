// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.28.0
// source: airplane_model.sql

package db

import (
	"context"
)

const createAirplaneModel = `-- name: CreateAirplaneModel :one
INSERT INTO airplane_model (
  name,
  manufacturer,
  total_seats
) VALUES (
  $1, $2, $3
) RETURNING airplane_model_id, name, manufacturer, total_seats, created_at
`

type CreateAirplaneModelParams struct {
	Name         string `json:"name"`
	Manufacturer string `json:"manufacturer"`
	TotalSeats   int64  `json:"total_seats"`
}

func (q *Queries) CreateAirplaneModel(ctx context.Context, arg CreateAirplaneModelParams) (AirplaneModel, error) {
	row := q.db.QueryRow(ctx, createAirplaneModel, arg.Name, arg.Manufacturer, arg.TotalSeats)
	var i AirplaneModel
	err := row.Scan(
		&i.AirplaneModelID,
		&i.Name,
		&i.Manufacturer,
		&i.TotalSeats,
		&i.CreatedAt,
	)
	return i, err
}

const deleteAirplaneModel = `-- name: DeleteAirplaneModel :exec
DELETE FROM airplane_model
WHERE airplane_model_id = $1
`

func (q *Queries) DeleteAirplaneModel(ctx context.Context, airplaneModelID int64) error {
	_, err := q.db.Exec(ctx, deleteAirplaneModel, airplaneModelID)
	return err
}

const getAirplaneModel = `-- name: GetAirplaneModel :one
SELECT airplane_model_id, name, manufacturer, total_seats, created_at FROM airplane_model
WHERE airplane_model_id = $1 LIMIT 1
`

func (q *Queries) GetAirplaneModel(ctx context.Context, airplaneModelID int64) (AirplaneModel, error) {
	row := q.db.QueryRow(ctx, getAirplaneModel, airplaneModelID)
	var i AirplaneModel
	err := row.Scan(
		&i.AirplaneModelID,
		&i.Name,
		&i.Manufacturer,
		&i.TotalSeats,
		&i.CreatedAt,
	)
	return i, err
}

const listAirplaneModels = `-- name: ListAirplaneModels :many
SELECT airplane_model_id, name, manufacturer, total_seats, created_at FROM airplane_model
ORDER BY airplane_model_id
LIMIT $1
OFFSET $2
`

type ListAirplaneModelsParams struct {
	Limit  int32 `json:"limit"`
	Offset int32 `json:"offset"`
}

func (q *Queries) ListAirplaneModels(ctx context.Context, arg ListAirplaneModelsParams) ([]AirplaneModel, error) {
	rows, err := q.db.Query(ctx, listAirplaneModels, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []AirplaneModel{}
	for rows.Next() {
		var i AirplaneModel
		if err := rows.Scan(
			&i.AirplaneModelID,
			&i.Name,
			&i.Manufacturer,
			&i.TotalSeats,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
