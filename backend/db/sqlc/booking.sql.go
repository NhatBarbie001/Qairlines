// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.28.0
// source: booking.sql

package db

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const createBooking = `-- name: CreateBooking :one
INSERT INTO booking (
  booking_id,
  booker_email,
  number_of_adults,
  number_of_children,
  flight_class,
  cancelled,
  flight_id
) VALUES (
  $1, $2, $3, $4, $5, $6, $7
) RETURNING booking_id, booker_email, number_of_adults, number_of_children, flight_class, cancelled, flight_id, booking_date
`

type CreateBookingParams struct {
	BookingID        string          `json:"booking_id"`
	BookerEmail      string          `json:"booker_email"`
	NumberOfAdults   int64           `json:"number_of_adults"`
	NumberOfChildren int64           `json:"number_of_children"`
	FlightClass      FlightClassType `json:"flight_class"`
	Cancelled        pgtype.Bool     `json:"cancelled"`
	FlightID         int64           `json:"flight_id"`
}

func (q *Queries) CreateBooking(ctx context.Context, arg CreateBookingParams) (Booking, error) {
	row := q.db.QueryRow(ctx, createBooking,
		arg.BookingID,
		arg.BookerEmail,
		arg.NumberOfAdults,
		arg.NumberOfChildren,
		arg.FlightClass,
		arg.Cancelled,
		arg.FlightID,
	)
	var i Booking
	err := row.Scan(
		&i.BookingID,
		&i.BookerEmail,
		&i.NumberOfAdults,
		&i.NumberOfChildren,
		&i.FlightClass,
		&i.Cancelled,
		&i.FlightID,
		&i.BookingDate,
	)
	return i, err
}

const deleteBookings = `-- name: DeleteBookings :exec
DELETE FROM booking
WHERE booking_id = $1
`

func (q *Queries) DeleteBookings(ctx context.Context, bookingID string) error {
	_, err := q.db.Exec(ctx, deleteBookings, bookingID)
	return err
}

const getBooking = `-- name: GetBooking :one
SELECT booking_id, booker_email, number_of_adults, number_of_children, flight_class, cancelled, flight_id, booking_date FROM booking
WHERE booking_id = $1 LIMIT 1
`

func (q *Queries) GetBooking(ctx context.Context, bookingID string) (Booking, error) {
	row := q.db.QueryRow(ctx, getBooking, bookingID)
	var i Booking
	err := row.Scan(
		&i.BookingID,
		&i.BookerEmail,
		&i.NumberOfAdults,
		&i.NumberOfChildren,
		&i.FlightClass,
		&i.Cancelled,
		&i.FlightID,
		&i.BookingDate,
	)
	return i, err
}

const listBookings = `-- name: ListBookings :many
SELECT booking_id, booker_email, number_of_adults, number_of_children, flight_class, cancelled, flight_id, booking_date FROM booking
ORDER BY booking_id
LIMIT $1
OFFSET $2
`

type ListBookingsParams struct {
	Limit  int32 `json:"limit"`
	Offset int32 `json:"offset"`
}

func (q *Queries) ListBookings(ctx context.Context, arg ListBookingsParams) ([]Booking, error) {
	rows, err := q.db.Query(ctx, listBookings, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Booking
	for rows.Next() {
		var i Booking
		if err := rows.Scan(
			&i.BookingID,
			&i.BookerEmail,
			&i.NumberOfAdults,
			&i.NumberOfChildren,
			&i.FlightClass,
			&i.Cancelled,
			&i.FlightID,
			&i.BookingDate,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
