// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.28.0
// source: flight_seats.sql

package db

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const createFlightSeat = `-- name: CreateFlightSeat :one
INSERT INTO flight_seats (
  registration_number,
  flight_class,
  class_multiplier,
  child_multiplier,
  max_row_seat,
  max_col_seat
) VALUES (
  $1, $2, $3, $4, $5, $6
) RETURNING flight_seats_id, registration_number, flight_class, class_multiplier, child_multiplier, max_row_seat, max_col_seat
`

type CreateFlightSeatParams struct {
	RegistrationNumber string         `json:"registration_number"`
	FlightClass        string         `json:"flight_class"`
	ClassMultiplier    pgtype.Numeric `json:"class_multiplier"`
	ChildMultiplier    pgtype.Numeric `json:"child_multiplier"`
	MaxRowSeat         int64          `json:"max_row_seat"`
	MaxColSeat         int64          `json:"max_col_seat"`
}

func (q *Queries) CreateFlightSeat(ctx context.Context, arg CreateFlightSeatParams) (FlightSeat, error) {
	row := q.db.QueryRow(ctx, createFlightSeat,
		arg.RegistrationNumber,
		arg.FlightClass,
		arg.ClassMultiplier,
		arg.ChildMultiplier,
		arg.MaxRowSeat,
		arg.MaxColSeat,
	)
	var i FlightSeat
	err := row.Scan(
		&i.FlightSeatsID,
		&i.RegistrationNumber,
		&i.FlightClass,
		&i.ClassMultiplier,
		&i.ChildMultiplier,
		&i.MaxRowSeat,
		&i.MaxColSeat,
	)
	return i, err
}

const deleteFlightSeat = `-- name: DeleteFlightSeat :exec
DELETE FROM flight_seats
WHERE registration_number = $1
`

func (q *Queries) DeleteFlightSeat(ctx context.Context, registrationNumber string) error {
	_, err := q.db.Exec(ctx, deleteFlightSeat, registrationNumber)
	return err
}

const getFlightSeat = `-- name: GetFlightSeat :one
SELECT flight_seats_id, registration_number, flight_class, class_multiplier, child_multiplier, max_row_seat, max_col_seat FROM flight_seats
WHERE registration_number = $1 LIMIT 1
`

func (q *Queries) GetFlightSeat(ctx context.Context, registrationNumber string) (FlightSeat, error) {
	row := q.db.QueryRow(ctx, getFlightSeat, registrationNumber)
	var i FlightSeat
	err := row.Scan(
		&i.FlightSeatsID,
		&i.RegistrationNumber,
		&i.FlightClass,
		&i.ClassMultiplier,
		&i.ChildMultiplier,
		&i.MaxRowSeat,
		&i.MaxColSeat,
	)
	return i, err
}

const listFlightSeats = `-- name: ListFlightSeats :many
SELECT flight_seats_id, registration_number, flight_class, class_multiplier, child_multiplier, max_row_seat, max_col_seat FROM flight_seats
ORDER BY registration_number
LIMIT $1
OFFSET $2
`

type ListFlightSeatsParams struct {
	Limit  int32 `json:"limit"`
	Offset int32 `json:"offset"`
}

func (q *Queries) ListFlightSeats(ctx context.Context, arg ListFlightSeatsParams) ([]FlightSeat, error) {
	rows, err := q.db.Query(ctx, listFlightSeats, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []FlightSeat
	for rows.Next() {
		var i FlightSeat
		if err := rows.Scan(
			&i.FlightSeatsID,
			&i.RegistrationNumber,
			&i.FlightClass,
			&i.ClassMultiplier,
			&i.ChildMultiplier,
			&i.MaxRowSeat,
			&i.MaxColSeat,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
