// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.28.0
// source: passenger.sql

package db

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const checkSeatOccupied = `-- name: CheckSeatOccupied :one
SELECT EXISTS (
  SELECT 1
  FROM passengers
  JOIN booking ON passengers.booking_id = booking.booking_id
  WHERE booking.flight_id = $1
    AND booking.flight_class = $2
    AND passengers.seat_row = $3
    AND passengers.seat_col = $4
) AS seat_taken
`

type CheckSeatOccupiedParams struct {
	FlightID    int64           `json:"flight_id"`
	FlightClass FlightClassType `json:"flight_class"`
	SeatRow     int32           `json:"seat_row"`
	SeatCol     string          `json:"seat_col"`
}

func (q *Queries) CheckSeatOccupied(ctx context.Context, arg CheckSeatOccupiedParams) (bool, error) {
	row := q.db.QueryRow(ctx, checkSeatOccupied,
		arg.FlightID,
		arg.FlightClass,
		arg.SeatRow,
		arg.SeatCol,
	)
	var seat_taken bool
	err := row.Scan(&seat_taken)
	return seat_taken, err
}

const countOccupiedSeats = `-- name: CountOccupiedSeats :one
SELECT COUNT(*) FROM passengers as p
JOIN booking as b ON p.booking_id = b.booking_id
WHERE b.flight_id = $1 AND b.flight_class = $2
`

type CountOccupiedSeatsParams struct {
	FlightID    int64           `json:"flight_id"`
	FlightClass FlightClassType `json:"flight_class"`
}

func (q *Queries) CountOccupiedSeats(ctx context.Context, arg CountOccupiedSeatsParams) (int64, error) {
	row := q.db.QueryRow(ctx, countOccupiedSeats, arg.FlightID, arg.FlightClass)
	var count int64
	err := row.Scan(&count)
	return count, err
}

const createPassenger = `-- name: CreatePassenger :one
INSERT INTO passengers (
  booking_id,
  citizen_id,
  passport_number,
  gender,
  phone_number,
  first_name,
  last_name,
  nationality,
  date_of_birth,
  seat_row,
  seat_col
) VALUES (
  $1, $2, $3, $4, $5, $6, $7, $8, $9, $10, $11
) RETURNING passenger_id, booking_id, citizen_id, passport_number, gender, phone_number, first_name, last_name, nationality, date_of_birth, seat_row, seat_col
`

type CreatePassengerParams struct {
	BookingID      int64       `json:"booking_id"`
	CitizenID      string      `json:"citizen_id"`
	PassportNumber pgtype.Text `json:"passport_number"`
	Gender         GenderEnum  `json:"gender"`
	PhoneNumber    string      `json:"phone_number"`
	FirstName      string      `json:"first_name"`
	LastName       string      `json:"last_name"`
	Nationality    string      `json:"nationality"`
	DateOfBirth    pgtype.Date `json:"date_of_birth"`
	SeatRow        int32       `json:"seat_row"`
	SeatCol        string      `json:"seat_col"`
}

func (q *Queries) CreatePassenger(ctx context.Context, arg CreatePassengerParams) (Passenger, error) {
	row := q.db.QueryRow(ctx, createPassenger,
		arg.BookingID,
		arg.CitizenID,
		arg.PassportNumber,
		arg.Gender,
		arg.PhoneNumber,
		arg.FirstName,
		arg.LastName,
		arg.Nationality,
		arg.DateOfBirth,
		arg.SeatRow,
		arg.SeatCol,
	)
	var i Passenger
	err := row.Scan(
		&i.PassengerID,
		&i.BookingID,
		&i.CitizenID,
		&i.PassportNumber,
		&i.Gender,
		&i.PhoneNumber,
		&i.FirstName,
		&i.LastName,
		&i.Nationality,
		&i.DateOfBirth,
		&i.SeatRow,
		&i.SeatCol,
	)
	return i, err
}

const deletePassenger = `-- name: DeletePassenger :exec
DELETE FROM passengers
WHERE passenger_id = $1
`

func (q *Queries) DeletePassenger(ctx context.Context, passengerID int64) error {
	_, err := q.db.Exec(ctx, deletePassenger, passengerID)
	return err
}

const getPassenger = `-- name: GetPassenger :one
SELECT passenger_id, booking_id, citizen_id, passport_number, gender, phone_number, first_name, last_name, nationality, date_of_birth, seat_row, seat_col FROM passengers
WHERE passenger_id = $1 LIMIT 1
`

func (q *Queries) GetPassenger(ctx context.Context, passengerID int64) (Passenger, error) {
	row := q.db.QueryRow(ctx, getPassenger, passengerID)
	var i Passenger
	err := row.Scan(
		&i.PassengerID,
		&i.BookingID,
		&i.CitizenID,
		&i.PassportNumber,
		&i.Gender,
		&i.PhoneNumber,
		&i.FirstName,
		&i.LastName,
		&i.Nationality,
		&i.DateOfBirth,
		&i.SeatRow,
		&i.SeatCol,
	)
	return i, err
}

const listPassengers = `-- name: ListPassengers :many
SELECT passenger_id, booking_id, citizen_id, passport_number, gender, phone_number, first_name, last_name, nationality, date_of_birth, seat_row, seat_col FROM passengers
ORDER BY passenger_id
LIMIT $1
OFFSET $2
`

type ListPassengersParams struct {
	Limit  int32 `json:"limit"`
	Offset int32 `json:"offset"`
}

func (q *Queries) ListPassengers(ctx context.Context, arg ListPassengersParams) ([]Passenger, error) {
	rows, err := q.db.Query(ctx, listPassengers, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Passenger{}
	for rows.Next() {
		var i Passenger
		if err := rows.Scan(
			&i.PassengerID,
			&i.BookingID,
			&i.CitizenID,
			&i.PassportNumber,
			&i.Gender,
			&i.PhoneNumber,
			&i.FirstName,
			&i.LastName,
			&i.Nationality,
			&i.DateOfBirth,
			&i.SeatRow,
			&i.SeatCol,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
