// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.28.0
// source: admin.sql

package db

import (
	"context"
)

const createAdmin = `-- name: CreateAdmin :one
INSERT INTO admin (
  username,
  password
) VALUES (
  $1, $2
) RETURNING admin_id, username, password
`

type CreateAdminParams struct {
	Username string `json:"username"`
	Password string `json:"password"`
}

func (q *Queries) CreateAdmin(ctx context.Context, arg CreateAdminParams) (Admin, error) {
	row := q.db.QueryRow(ctx, createAdmin, arg.Username, arg.Password)
	var i Admin
	err := row.Scan(&i.AdminID, &i.Username, &i.Password)
	return i, err
}

const deleteAdmin = `-- name: DeleteAdmin :exec
DELETE FROM admin
WHERE admin_id = $1
`

func (q *Queries) DeleteAdmin(ctx context.Context, adminID int64) error {
	_, err := q.db.Exec(ctx, deleteAdmin, adminID)
	return err
}

const getAdmin = `-- name: GetAdmin :one
SELECT admin_id, username, password FROM admin
WHERE admin_id = $1 LIMIT 1
`

func (q *Queries) GetAdmin(ctx context.Context, adminID int64) (Admin, error) {
	row := q.db.QueryRow(ctx, getAdmin, adminID)
	var i Admin
	err := row.Scan(&i.AdminID, &i.Username, &i.Password)
	return i, err
}

const listAdmins = `-- name: ListAdmins :many
SELECT admin_id, username, password FROM admin
ORDER BY admin_id
LIMIT $1
OFFSET $2
`

type ListAdminsParams struct {
	Limit  int32 `json:"limit"`
	Offset int32 `json:"offset"`
}

func (q *Queries) ListAdmins(ctx context.Context, arg ListAdminsParams) ([]Admin, error) {
	rows, err := q.db.Query(ctx, listAdmins, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Admin{}
	for rows.Next() {
		var i Admin
		if err := rows.Scan(&i.AdminID, &i.Username, &i.Password); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
